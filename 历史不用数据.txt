if(applyType == 1){
            //模版CODE: SMS_86680145
            //模版内容: 尊敬的手机尾号为${phone}的用户，您于${time}申请的押金退回业务已受理成功，平台审核通过后即可将押金退回您原支付账户。
            String phone = fansService.getByOpenid(openid).getPhoneNo();
            Map<String, String> paramMap = new HashMap<>();
            paramMap.put("phone", phone.substring(7, 11));
            paramMap.put("time", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
            hhtcHelper.sendSms(phone, "SMS_86680145", paramMap);
            /*
            {{first.DATA}}
            申请人：{{keyword1.DATA}}
            申请时间：{{keyword2.DATA}}
            押金退还金额：{{keyword3.DATA}}
            {{remark.DATA}}

            您好:
            申请人：张三
            申请时间：20170801 22:00
            押金退还金额：199元
            您的退还押金申请已提交，请耐心等待平台审核。
            */
            WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
            dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的用户，您好："));
            dataItem.put("keyword1", new WeixinTemplateMsg.DItem("手机尾号为" + phone.substring(7, 11)));
            dataItem.put("keyword2", new WeixinTemplateMsg.DItem(DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss")));
            dataItem.put("keyword3", new WeixinTemplateMsg.DItem(money.toString() + "元"));
            dataItem.put("remark", new WeixinTemplateMsg.DItem("您的退还押金申请已提交，请耐心等待平台审核。"));
            String url = this.hhtcContextPath + this.portalCenterUrl;
            url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+apply.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+apply.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
            WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
            templateMsg.setTemplate_id("icvejpeS8si4HTT8mivfGgg_xn62EjH4bRobSTPDx2U");
            templateMsg.setUrl(url);
            templateMsg.setTouser(apply.getOpenid());
            templateMsg.setData(dataItem);
            WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(apply.getAppid()), templateMsg);
        }
        if(applyType == 2){
            //模版CODE: SMS_86680144
            //模版内容: 尊敬的手机尾号为${phone}的用户，您于${time}申请的${money}元的提现业务已受理成功，平台审核通过后即可向您微信账户转账汇款。
            String phone = fansService.getByOpenid(openid).getPhoneNo();
            Map<String, String> paramMap = new HashMap<>();
            paramMap.put("phone", phone.substring(7, 11));
            paramMap.put("time", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
            paramMap.put("money", money.toString());
            hhtcHelper.sendSms(phone, "SMS_86680144", paramMap);
            /*
            {{first.DATA}}
            申请人：{{keyword1.DATA}}
            申请时间：{{keyword2.DATA}}
            提现金额：{{keyword3.DATA}}
            {{remark.DATA}}

            您好:
            申请人：张三
            申请时间：20170801 22:00
            提现金额：50元
            您的提现申请已提交，请耐心等待平台审核，预计2个工作日内到账
            */
            WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
            dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的用户，您好："));
            dataItem.put("keyword1", new WeixinTemplateMsg.DItem("手机尾号为" + phone.substring(7, 11)));
            dataItem.put("keyword2", new WeixinTemplateMsg.DItem(DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss")));
            dataItem.put("keyword3", new WeixinTemplateMsg.DItem(money.toString() + "元"));
            dataItem.put("remark", new WeixinTemplateMsg.DItem("您的提现申请已提交，平台审核通过后即可向您微信账户转账汇款。"));
            String url = this.hhtcContextPath + this.portalCenterUrl;
            url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+apply.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+apply.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
            WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
            templateMsg.setTemplate_id("cxPmkCSXAs2rXH4_xork3lbIugMN87C2mnyavJdOLu8");
            templateMsg.setUrl(url);
            templateMsg.setTouser(apply.getOpenid());
            templateMsg.setData(dataItem);
            WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(apply.getAppid()), templateMsg);
        }





//
//
//    /**
//     * 后台運營主動調配訂單
//     */
//    @Transactional(rollbackFor=Exception.class)
//    public void allocate(long orderId, String phoneNo, String ids) {
//        MppUserInfo mppUserInfo = mppUserInfoRepository.findByMptypeAndBindStatus(1, 1);
//        if(null==mppUserInfo || mppUserInfo.getId()==0){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "获取平台UID失败");
//        }
//        MppFansInfor fansInfo = fansInforRepository.findByPhoneNo(phoneNo);
//        if(null==fansInfo || null==fansInfo.getId() || fansInfo.getId()==0 || "0".equals(fansInfo.getSubscribe())){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "无法识别粉丝或未关注公众号");
//        }
//        //TODO
////        if(2 != fansInfo.getCarOwnerStatus()){
////            throw new HHTCException(CodeEnum.HHTC_UNREG_CAR_OWNER);
////        }
//        //校驗原訂單
//        OrderInfo order = this.get(orderId);
//        if(order.getOrderType()!=1 && order.getOrderType()!=2){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "原訂單類型無效["+order.getOrderType()+"]");
//        }
//        if(order.getOrderStatus()==9 || order.getOrderStatus()==99){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "原訂單已轉租或已完成");
//        }
//        if(order.getOrderStatus()!=2){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "原訂單未支付成功");
//        }
//        //校验是否已入场
//        OrderInout inout = orderInoutRepository.findByOrderNoAndInTimeNotNullAndOutTimeNull(order.getOutTradeNo());
//        if(null==inout || null==inout.getInTime()){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车主未入场");
//        }
//        //校验是否已被锁定
//        BigDecimal price = new BigDecimal(0);
//        List<GoodsPublishOrder> orderList = new ArrayList<>();
//        for(String id : ids.split("`")){
////            if(pubOrder.getStatus() != 0){
////                throw new HHTCException(CodeEnum.HHTC_GOODS_ORDER_FAIL);
////            }
////            orderList.add(pubOrder);
////            price = price.add(pubOrder.getPrice());
//        }
//
//        //將原訂單置為已完成
//        order.setOrderStatus(99);
//        this.upsert(order);
//        Date currInTime = new Date();
//        orderInoutRepository.deleteByOrderNo(order.getOutTradeNo());
//        //釋放原訂單的車位发布信息和車位信息
//        goodsPublishOrderService.updateStatusToPublishing(orderList);
//        //再重新下单（訂單金額仍為原訂單的金額）
//        OrderInfo orderInfo = new OrderInfo();
//        orderInfo.setCommunityId(orderList.get(0).getCommunityId());
//        orderInfo.setCommunityName(orderList.get(0).getCommunityName());
//        orderInfo.setGoodsId(orderList.get(0).getGoodsId());
//        orderInfo.setGoodsPublishOrderIds(ids);
//        orderInfo.setCarParkNumber(orderList.get(0).getCarParkNumber());
//        orderInfo.setCarParkImg(orderList.get(0).getCarParkImg());
//        orderInfo.setCarNumber(order.getCarNumber());
////        orderInfo.setOpenFromTime(orderList.get(0).getPublishFromTime());
////        orderInfo.setOpenEndTime(orderList.get(orderList.size()-1).getPublishEndTime());
////        orderInfo.setOutTradeNo(hhtcHelper.buildOrderNo(8));
//        orderInfo.setTotalFee(Long.parseLong(MoneyUtil.yuanToFen(price.toString())));
//        orderInfo.setDepositMoney(new BigDecimal(0));
//        orderInfo.setCanRefundMoney(new BigDecimal(0));
//        orderInfo.setOpenid(order.getOpenid());
//        orderInfo.setAppid(mppUserInfo.getAppid());
//        orderInfo.setOrderType(1);
//        orderInfo.setOrderStatus(2);
//        orderInfo = this.upsert(orderInfo);
//        orderInoutService.initInout(orderInfo, orderList.get(0).getOpenid(), inout.getInTime());
//        //分润（分潤使用的金額為新訂單的发布信息總金額）
//        BigDecimal oldPrice = new BigDecimal(MoneyUtil.fenToYuan(order.getTotalFee()+""));
//        if(price.compareTo(oldPrice) == 1){
//            //不需要扣减车主余额，因為車主在之前訂單已經支付過了，不過要看新訂單金額是否大于車主原訂單金額，大于則口平台資金
//            BigDecimal lessPrice = price.subtract(oldPrice);
//            UserFunds funds = userFundsRepository.findByUid(mppUserInfo.getId());
//            if(null == funds){
//                funds = new UserFunds();
//                funds.setUid(mppUserInfo.getId());
//                funds.setMoneyBase(new BigDecimal(0));
//                funds.setMoneyBalance(new BigDecimal(0));
//            }
//            funds.setMoneyBalance(funds.getMoneyBalance().subtract(lessPrice));
//            funds = userFundsRepository.saveAndFlush(funds);
//            UserFundsFlow fundsFlow = new UserFundsFlow();
//            fundsFlow.setFundsId(funds.getId());
//            fundsFlow.setUid(mppUserInfo.getId());
//            fundsFlow.setMoney(lessPrice);
//            fundsFlow.setInOut("out");
//            fundsFlow.setInOutDesc("調配訂單時扣減平台余額");
//            fundsFlow.setInOutType(4);
//            fundsFlow.setBizDate(Integer.parseInt(DateUtil.getCurrentDate()));
//            fundsFlow.setBizDateTime(new Date());
//            userFundsFlowService.upsert(fundsFlow);
//        }
//        orderRentService.rent(99, orderList.get(0).getOpenid(), orderInfo);
//    }

//    /**
//     * 审核通过或拒绝车位
//     */
//    @Transactional(rollbackFor=Exception.class)
//    public GoodsInfo audit(MppUserInfo userInfo, GoodsInfo goodsInfo){
//        if(goodsInfo.getCarAuditStatus() == 1){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "审核时传输的状态无效");
//        }
//        //物管只能审核自己小区的车位
//        if(userInfo.getType() == 2){
//            List<Long> idList = new ArrayList<>();
//            for(CommunityInfo obj : communityService.getByUid(userInfo.getId())){
//                idList.add(obj.getId());
//            }
//            if(!idList.contains(goodsInfo.getCommunityId())){
//                throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "只能审核自己小区的车位");
//            }
//        }

//        //校验是否注册车位主
//        MppFansInfor fansInfo = fansService.getByOpenid(goodsInfo.getOpenid());
//        if(2 != fansInfo.getCarParkStatus()){
//            throw new HHTCException(CodeEnum.HHTC_UNREG_CAR_PARK);
//        }
//        goodsInfo.setCarAuditTime(new Date());
//        goodsInfo.setCarAuditUid(userInfo.getId());
//        goodsInfo = goodsRepository.saveAndFlush(goodsInfo);
//
//        if(goodsInfo.getCarAuditStatus() == 2 && Constants.ISSMS){
//            /*
//            {{first.DATA}}
//            手机号：{{keyword1.DATA}}
//            审核结果：{{keyword2.DATA}}
//            {{remark.DATA}}
//
//            尊敬的用户，您的押金退回业务审核结果如下
//            手机号：尾号3432
//            审核结果：通过
//            您交付平台的押金已退回您原支付账户，预计1~7个工作日到账，请注意查收。
//            */
//            WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
//            dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车位主，您的车位申请已经审核通过！"));
//            dataItem.put("keyword1", new WeixinTemplateMsg.DItem("尾号" + fansInfor.getPhoneNo().substring(7,11)));
//            dataItem.put("keyword2", new WeixinTemplateMsg.DItem("车位号：" + goodsInfo.getCarParkNumber() + "审核通过"));
//            dataItem.put("remark", new WeixinTemplateMsg.DItem("我要抢车位，方便加一倍！点击“抢车位”，停车舒心更省心！"));
//            String url = this.hhtcContextPath + "/portal/index.html#/publish";
//            url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+goodsInfo.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+goodsInfo.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
//            WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
//            templateMsg.setTemplate_id("upsa1MpVfulcu69n_f7B6kF2s8uV9ODU47estmNWuK4");
//            templateMsg.setUrl(url);
//            templateMsg.setTouser(fansInfo.getOpenid());
//            templateMsg.setData(dataItem);
//            WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(goodsInfo.getAppid()), templateMsg);
//        }
//        if(goodsInfo.getCarAuditStatus() == 3 && Constants.ISSMS){
//            /*
//            {{first.DATA}}
//            审核姓名：{{keyword1.DATA}}
//            拒绝原因：{{keyword2.DATA}}
//            {{remark.DATA}}
//
//            尊敬的司导您好，您的专车服务未通过审核！
//            审核姓名：张三 师傅
//            拒绝原因：身份证照片模糊不清
//            请填写正确的有效信息，重新申请。如有问题请点击查看司导填写教程
//            */
//            WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
//            dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车位主，您的车位未审核通过！"));
//            dataItem.put("keyword1", new WeixinTemplateMsg.DItem(goodsInfo.getCarParkNumber()));
//            dataItem.put("keyword2", new WeixinTemplateMsg.DItem(goodsInfo.getCarAuditRemark()));
//            dataItem.put("remark", new WeixinTemplateMsg.DItem("请填写正确的有效信息，重新申请，谢谢！"));
//            String url = this.hhtcContextPath + "/portal/index.html#/publish";
//            url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+goodsInfo.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+goodsInfo.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
//            WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
//            templateMsg.setTemplate_id("337mC1vqm0l4bxf8WdEKfiNYO9BOjKCWlJus7hw2bPI");
//            templateMsg.setUrl(url);
//            templateMsg.setTouser(goodsInfo.getOpenid());
//            templateMsg.setData(dataItem);
//            WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(goodsInfo.getAppid()), templateMsg);
//        }
//        return goodsInfo;
//    }


  /*
        {{first.DATA}}
        订单编号：{{keyword1.DATA}}
        停车位：{{keyword2.DATA}}
        车牌号：{{keyword3.DATA}}
        预计到达时间：{{keyword4.DATA}}
        预计离开时间：{{keyword5.DATA}}
        {{remark.DATA}}

        尊敬的客户，您已成功预约珠江帝景A00停车位
        订单编号：1000387777
        停车位：珠江帝景A00
        车牌号：粤A0397Z
        预计到达时间：2016年5月19日 18:00
        预计离开时间：2016年5月19日 20:00
        优泊停车提醒您，请注意帐号防盗 如有疑问，请拨打咨询热线020-38383888。
        */
        WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
        dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车主，您已成功预约车位："+orderInfo.getCommunityName()+"-" +orderInfo.getCarParkNumber()));
        dataItem.put("keyword1", new WeixinTemplateMsg.DItem(orderInfo.getOutTradeNo()));
        dataItem.put("keyword2", new WeixinTemplateMsg.DItem(orderInfo.getCarParkNumber()));
        dataItem.put("keyword3", new WeixinTemplateMsg.DItem(orderInfo.getCarNumber()));
        dataItem.put("keyword4", new WeixinTemplateMsg.DItem(DateFormatUtils.format(hhtcHelper.convertToDate(hhtcHelper.calcOrderFromDate(orderInfo), orderInfo.getOpenFromTime()), "yyyy-MM-dd HH:mm")));
        dataItem.put("keyword5", new WeixinTemplateMsg.DItem(DateFormatUtils.format(hhtcHelper.convertToDate(hhtcHelper.calcOrderEndDate(orderInfo), orderInfo.getOpenEndTime()), "yyyy-MM-dd HH:mm")));
        dataItem.put("remark", new WeixinTemplateMsg.DItem("吼吼共享停车提醒您：请注意停车时间，避免错过。"));
        String url = this.hhtcContextPath + this.templateUrlNeed.replace("{orderId}", orderInfo.getId()+"");
        url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+orderInfo.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+orderInfo.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
        WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
        templateMsg.setTemplate_id("vkWecSSZW6qJQ4qXXX1iH7QaRvV1HJrcmky208AKx88");
        templateMsg.setUrl(url);
        templateMsg.setTouser(orderInfo.getOpenid());
        templateMsg.setData(dataItem);
        WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(orderInfo.getAppid()), templateMsg);
        dataItem = new WeixinTemplateMsg.DataItem();
        dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车位主，您的车位已被预约："+orderInfo.getCommunityName()+"-" +orderInfo.getCarParkNumber()));
        dataItem.put("keyword1", new WeixinTemplateMsg.DItem(orderInfo.getOutTradeNo()));
        dataItem.put("keyword2", new WeixinTemplateMsg.DItem(orderInfo.getCarParkNumber()));
        dataItem.put("keyword3", new WeixinTemplateMsg.DItem(orderInfo.getCarNumber()));
        dataItem.put("keyword4", new WeixinTemplateMsg.DItem(DateFormatUtils.format(hhtcHelper.convertToDate(hhtcHelper.calcOrderFromDate(orderInfo), orderInfo.getOpenFromTime()), "yyyy-MM-dd HH:mm")));
        dataItem.put("keyword5", new WeixinTemplateMsg.DItem(DateFormatUtils.format(hhtcHelper.convertToDate(hhtcHelper.calcOrderEndDate(orderInfo), orderInfo.getOpenEndTime()), "yyyy-MM-dd HH:mm")));
        dataItem.put("remark", new WeixinTemplateMsg.DItem("吼吼共享停车提醒您：本次的车位预约所获得租金已打到您的余额中。"));
        url = this.hhtcContextPath + this.portalCenterUrl;
        url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+orderInfo.getAppid()+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+orderInfo.getAppid()+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
        templateMsg = new WeixinTemplateMsg();
        templateMsg.setTemplate_id("vkWecSSZW6qJQ4qXXX1iH7QaRvV1HJrcmky208AKx88");
        templateMsg.setUrl(url);
        templateMsg.setTouser(orderList.get(0).getOpenid());
        templateMsg.setData(dataItem);
        WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(orderInfo.getAppid()), templateMsg);



    /**
     * 查询粉丝押金是否足够
     * <p>
     *     目前该接口仅供车主预约下单后，预览订单时使用
     * </p>
     */
    @GetMapping("/deposit/isenough")
    public CommonResult depositIsenough(long communityId, HttpSession session){
        String openid = hhtcHelper.getWxOpenidFromSession(session);
        return new CommonResult(userFundsService.depositIsenough(openid, communityId));
    }




    /**
     * 审核车主或车位主
     * @param id     粉丝ID
     * @param status 审核状态：2--审核通过，3--审核拒绝
     * @param type   类型：1--车主，2--车位主
     */
    @ResponseBody
    @RequestMapping("/carAudit")
    public CommonResult carAudit(long id, int status, int type, String auditRemark, HttpSession session){
         String appid = hhtcHelper.getWxAppidFromSession(session);
        MppUserInfo userInfo = (MppUserInfo)session.getAttribute(Constants.WEB_SESSION_USER);
        //fansService.carAudit(userInfo, id, status, type, auditRemark, appid);
        return new CommonResult();
    }





        List<GoodsPublishOrder> orderList = new ArrayList<>();
        for(String id : ids.split("`")){
            GoodsPublishOrder order = goodsPublishOrderRepository.findOne(Long.parseLong(id));
//            if(order.getStatus() != 0){
//                throw new HHTCException(CodeEnum.HHTC_GOODS_ORDER_FAIL);
//            }
            orderList.add(order);
            price = price.add(order.getPrice());
        }
        //校验押金和余额是否足够
        Map<String, String> fundsMap = new HashMap<>();
        fundsMap.put("moneyBase", new BigDecimal(0).toString());
        fundsMap.put("moneyRent", new BigDecimal(0).toString());
        UserFunds funds = userFundsService.get(openid);
        Map<String, String> dataMap = userFundsService.depositIsenough(openid, orderList.get(0).getCommunityId());
        if("0".equals(dataMap.get("isenough")) || price.compareTo(funds.getMoneyBalance())>0){
            fundsMap.put("moneyBase", dataMap.get("money"));
            if(price.compareTo(funds.getMoneyBalance()) > 0){
                fundsMap.put("moneyRent", (price.subtract(funds.getMoneyBalance())).toString());
            }
            fundsMap.put("moneyFull", (new BigDecimal(fundsMap.get("moneyBase")).add(new BigDecimal(fundsMap.get("moneyRent")))).toString());
            return new CommonResult(CodeEnum.HHTC_NEED_NO_MONEY, fundsMap);
        }
        //车牌号更新
        if(StringUtils.isBlank(carNumber)){
            carNumber = fansInfor.getCarNumber().split("`")[0];
        }else{
            carNumber = carNumber.toUpperCase();
            if(!fansInfor.getCarNumber().contains(carNumber)){
                fansInfor.setCarNumber(fansInfor.getCarNumber() + "`" + carNumber);
                fansService.upsert(fansInfor);
            }
        }
        //计算publishFromDates
        List<String> publishFromDateList = new ArrayList<>();
        for(GoodsPublishOrder obj : orderList){
            for(String _fromDate : obj.getPublishFromDates().split("-")){
                if(!publishFromDateList.contains(_fromDate)){
                    publishFromDateList.add(_fromDate);
                }
            }
        }
        publishFromDateList.sort(new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return Integer.parseInt(o1) - Integer.parseInt(o2);
            }
        });
        StringBuilder sb = new StringBuilder();
        for(String obj : publishFromDateList){
            sb.append("-").append(obj);
        }
        return new CommonResult(goodsPublishService.order(appid, openid, carNumber, price, ids, sb.toString().substring(1), orderList, fansInfor));



/**
     * 添加车位
     */
    @PostMapping("/add")
    public CommonResult add(GoodsInfo goodsInfo, HttpSession session){
        goodsInfo.setAppid(hhtcHelper.getWxAppidFromSession(session));
        goodsInfo.setOpenid(hhtcHelper.getWxOpenidFromSession(session));
        return new CommonResult(goodsService.add(goodsInfo));
    }


    /**
     * 删除车位（其会将该车位发布信息一并删除）
     */
    @PostMapping("/del")
    public CommonResult del(long id, HttpSession session){
        goodsService.del(null, id);
        return new CommonResult();
    }


    /**
     * 修改车位
     */
    @PostMapping("/update")
    public CommonResult update(long id, long communityId, String carParkNumber, String carEquityImg){
        return new CommonResult(goodsService.update(id, communityId, carParkNumber, carEquityImg));
    }



/**
     * 删除车位（其会将该车位发布信息一并删除）
     */
    @Transactional(rollbackFor=Exception.class)
    public void del(MppUserInfo userInfo, long id) {
        if(null!=userInfo && userInfo.getType()!=1){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "仅平台运营有删除权限");
        }
        //List<GoodsInfo> goodsInfoList = goodsRepository.findByOpenid(openid);
        //if(goodsInfoList.isEmpty() || goodsInfoList.size()==1){
        //    throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "请至少保留一个车位");
        //}
        GoodsInfo goods = goodsRepository.findOne(id);
        if(goods.getCarAuditStatus() == 1){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "审核中的车位不能删除");
        }
        if(2 == goods.getIsUsed()){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车位已被下单");
        }
        if(orderService.countByGoodsIdAndOrderTypeInAndOrderStatusIn(id, Arrays.asList(1, 2), Arrays.asList(2, 9)) > 0){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车位已被下单或转租");
        }
        goodsPublishOrderRepository.deleteByGoodsId(id);
        goodsPublishRepository.deleteByGoodsId(id);
        goodsRepository.delete(id);
        //更新车位重复状态
        List<GoodsInfo> list = goodsRepository.findByCarParkNumber(goods.getCarParkNumber());
        if(null!=list && list.size()==1){
            goodsRepository.updateStatus(goods.getCarParkNumber(), 0);
        }
    }


    /**
     * 修改车位
     */
    @Transactional(rollbackFor=Exception.class)
    public GoodsInfo update(long id, long communityId, String carParkNumber, String carEquityImg) {
        GoodsInfo info = goodsRepository.findOne(id);
        if(info.getCarAuditStatus() == 1){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "不能修改审核中的车位");
        }
        if(info.getCarAuditStatus() == 2){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "不能修改已审核通过的车位");
        }
        if(communityId != info.getCommunityId()){
            info.setCommunityId(communityId);
            info.setCommunityName(communityService.get(communityId).getName());
        }
        GoodsInfo gi = goodsRepository.findByOpenidAndCarParkNumber(info.getOpenid(), carParkNumber);
        if(null!=gi && null!=gi.getId() && gi.getId()!=id){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "您发布的车位已存在");
        }
        info.setCarParkNumber(carParkNumber);
        info.setCarEquityImg(carEquityImg);
        info.setCarAuditStatus(1);
        return goodsRepository.saveAndFlush(info);
    }



/**
     * 添加车位
     */
    @Transactional(rollbackFor=Exception.class)
    public GoodsInfo add(GoodsInfo goodsInfo){
        //校验唯一性
        GoodsInfo byOpenidAndCarParkNumber = goodsRepository.findByOpenidAndCarParkNumber(goodsInfo.getOpenid(), goodsInfo.getCarParkNumber());
        if(null!=byOpenidAndCarParkNumber){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "添加失败：您发布的车位已存在");
        }
        //校验小区是否存在
        CommunityInfo communityInfo = communityService.get(goodsInfo.getCommunityId());
        if(StringUtils.isBlank(communityInfo.getName())){
            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "无此小区communityId=[" + goodsInfo.getCommunityId() + "]");
        }
//        //校验是否注册车位主
//        if(2 != fansService.getByOpenid(goodsInfo.getOpenid()).getCarParkStatus()){
//            throw new HHTCException(CodeEnum.HHTC_UNREG_CAR_PARK);
//        }
        goodsInfo.setCommunityName(communityInfo.getName());
        goodsInfo.setIsUsed(0);
        goodsInfo.setCarAuditStatus(1);
        goodsInfo.setCarUsefulFromDate(goodsInfo.getCarUsefulFromDate());
        goodsInfo.setCarUsefulEndDate(goodsInfo.getCarUsefulEndDate());
        goodsInfo.setId(null);
        goodsInfo.setIsRepetition(0);
        // 是否重复
        List<GoodsInfo> byCarParkNumber = goodsRepository.findByCarParkNumber(goodsInfo.getCarParkNumber());
        if(byCarParkNumber.size()>0){
            goodsInfo.setIsRepetition(1);
            // 更新所有车位为重复
            goodsRepository.updateStatus(goodsInfo.getCarParkNumber(),1);
        }
        return goodsRepository.saveAndFlush(goodsInfo);
    }


    /**
     * 添加车牌号
     */
    @Transactional(rollbackFor=Exception.class)
    public MppFansInfor carNumberAdd(String openid, String carNumber) {
        MppFansInfor fansInfo = fansInfoRepository.findByOpenid(openid);
        if(StringUtils.isNotBlank(fansInfo.getCarNumber()) && fansInfo.getCarNumber().contains(carNumber)){
            return fansInfo;
        }
        if(StringUtils.isBlank(fansInfo.getCarNumber())){
            fansInfo.setCarNumber(carNumber);
        }else{
            fansInfo.setCarNumber(fansInfo.getCarNumber() + "`" + carNumber);
        }
        return fansInfoRepository.saveAndFlush(fansInfo);
    }


        MppFansInfor fansInfo = this.verifyBeforeReg(phoneNo, verifyCode, 2, openid);
        fansInfo.setPhoneNo(phoneNo);
        fansInfo.setCarParkCommunityId(carParkCommunityId);
        fansInfo.setCarParkCommunityName(communityInfo.getName());
        fansInfo.setCarParkStatus(1);
        fansInfo.setCarParkAuditStatus(1);
        fansInfo.setCarParkRegTime(new Date());
        fansInfo = fansInfoRepository.saveAndFlush(fansInfo);
        //新增或更新（审核拒绝后再次注册）车位信息
        GoodsInfo goodsInfo = goodsRepository.findByOpenidAndCarParkNumber(openid, carParkNumber);
        if(null == goodsInfo){
            goodsInfo = new GoodsInfo();
        }
        goodsInfo.setCommunityId(carParkCommunityId);
        goodsInfo.setCommunityName(communityInfo.getName());
        goodsInfo.setAppid(appid);
        goodsInfo.setOpenid(openid);
        goodsInfo.setCarParkNumber(carParkNumber);
        goodsInfo.setCarEquityImg(carEquityImg);
        goodsInfo.setCarAuditStatus(1);
        goodsInfo.setIsUsed(0);
        goodsInfo.setCarUsefulFromDate(carUsefulFromDate);
        goodsInfo.setCarUsefulEndDate(carUsefulEndDate);
        goodsInfo.setIsRepetition(0);
        // 是否重复
        List<GoodsInfo> byCarParkNumber = goodsRepository.findByCarParkNumber(goodsInfo.getCarParkNumber());
        if(byCarParkNumber.size()>0){
            goodsInfo.setIsRepetition(1);
            // 更新所有车位为重复
            goodsRepository.updateStatus(goodsInfo.getCarParkNumber(),1);
        }
        goodsRepository.saveAndFlush(goodsInfo);
        return fansInfo.getCarOwnerStatus() == 0;



//        if(StringUtils.isBlank(carNumber) || StringUtils.isBlank(houseNumber)){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车牌号或门牌号不能为空");
//        }
//        CommunityInfo communityInfo = communityService.get(carOwnerCommunityId);
//        if(StringUtils.isBlank(communityInfo.getName())){
//            throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "无此小区communityId=[" + carOwnerCommunityId + "]");
//        }
//        MppFansInfor fansInfo = this.verifyBeforeReg(phoneNo, verifyCode, 1, openid);
//        fansInfo.setPhoneNo(phoneNo);
//        fansInfo.setCarOwnerCommunityId(carOwnerCommunityId);
//        fansInfo.setCarOwnerCommunityName(communityInfo.getName());
//        fansInfo.setCarNumber(carNumber);
//        fansInfo.setHouseNumber(houseNumber);
//        fansInfo.setCarOwnerStatus(1);
//        fansInfo.setCarOwnerAuditStatus(1);
//        fansInfo.setCarOwnerRegTime(new Date());
//        fansInfo = fansInfoRepository.saveAndFlush(fansInfo);
//        return fansInfo.getCarParkStatus() == 0;



WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的" + (type == 1 ? "车主" : "车位主") + "，您的注册未审核通过！"));
dataItem.put("keyword1", new WeixinTemplateMsg.DItem(fansInfo.getPhoneNo().substring(0, 3) + "***" + fansInfo.getPhoneNo().substring(8)));
dataItem.put("keyword2", new WeixinTemplateMsg.DItem(auditRemark));
dataItem.put("remark", new WeixinTemplateMsg.DItem("请填写正确的有效信息，重新申请，谢谢！"));
WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
templateMsg.setTemplate_id("337mC1vqm0l4bxf8WdEKfiNYO9BOjKCWlJus7hw2bPI");
templateMsg.setUrl(this.hhtcContextPath + this.templateUrlRegAuditNotpass.replace("{userType}", type + ""));
templateMsg.setTouser(fansInfo.getOpenid());
templateMsg.setData(dataItem);
WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(appid), templateMsg);







    /**
     * TOKGO车牌号验证
     * *//*
    @Transactional(rollbackFor=Exception.class)
    public String PhoneNOCheck(String phoneNO ,String verifyCode, String openid){
        //检查是否用户授权
        if(GetInforState(2, openid).charAt(0) == '0')
            throw  new HHTCException(CodeEnum.HHTC_INFOR_ACCREDIT);
        //短信验证
        if(!smsService.smsVerify(phoneNO, verifyCode, 1))
            throw new HHTCException(CodeEnum.HHTC_SMS_VERIFY_FAIL);
        //验证成功 进行电话写入，并修改状态
        MppFansInfor fansInfo = fansInfoRepository.findByOpenid(openid);
        fansInfo.setPhoneNo(phoneNO);
        StringBuilder sb = new StringBuilder(fansInfo.getInfor_state());
        sb.setCharAt(1,'1');
        fansInfo.setInfor_state(sb.toString());
        fansInfo = fansInfoRepository.saveAndFlush(fansInfo);
        //返回当前状态码
        return fansInfo.getInfor_state();
    }*/

    /**
     * TOKGO车位验证
     * *//*
    @Transactional(rollbackFor=Exception.class)
    public String PhoneNOCheck(String phoneNO ,String verifyCode, String openid){
        //检查是否用户授权
        if(GetInforState(2, openid).charAt(0) == '0')
            throw  new HHTCException(CodeEnum.HHTC_INFOR_ACCREDIT);
        //短信验证
        if(!smsService.smsVerify(phoneNO, verifyCode, 1))
            throw new HHTCException(CodeEnum.HHTC_SMS_VERIFY_FAIL);
        //验证成功 进行电话写入，并修改状态
        MppFansInfor fansInfo = fansInfoRepository.findByOpenid(openid);
        fansInfo.setPhoneNo(phoneNO);
        StringBuilder sb = new StringBuilder(fansInfo.getInfor_state());
        sb.setCharAt(1,'1');
        fansInfo.setInfor_state(sb.toString());
        fansInfo = fansInfoRepository.saveAndFlush(fansInfo);
        //返回当前状态码
        return fansInfo.getInfor_state();
    }

*/



if(type == 2){
        //删除车位
            for(GoodsInfo obj : goodsReposi tory.findByOpenid(fansInfo.getOpenid())){
                if(2 == obj.getIsUsed()){
                    throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车位已被下单");
                }
                if(orderService.countByGoodsIdAndOrderTypeInAndOrderStatusIn(obj.getId(), Arrays.asList(1, 2), Arrays.asList(2, 9)) > 0){
                    throw new HHTCException(CodeEnum.SYSTEM_BUSY.getCode(), "车位已被下单或转租");
                }
                goodsPublishOrderRepository.deleteByGoodsId(obj.getId());
                goodsPublishRepository.deleteByGoodsId(obj.getId());
                goodsRepository.delete(obj.getId());
                //更新车位重复状态
                List<GoodsInfo> list = goodsRepository.findByCarParkNumber(obj.getCarParkNumber());
                if(null!=list && list.size()==1){
                    goodsRepository.updateStatus(obj.getCarParkNumber(), 0);
                }
            }
        }

--------审核不通过 发短信

//模版CODE: SMS_86725136（車位主）
                //模版内容: 尊敬的手机尾号为${phone}的用户：您好！感谢您注册吼吼停车，您提交的车位主资料已通过物业审核。请登录吼吼停车微信公众号发布您的车位吧！
                Map<String, String> paramMap = new HashMap<>();
                paramMap.put("phone", fansInfo.getPhoneNo().substring(7, 11));
                hhtcHelper.sendSms(fansInfo.getPhoneNo(), "SMS_86725136", paramMap);
                /*
                {{first.DATA}}
                手机号：{{keyword1.DATA}}
                审核结果：{{keyword2.DATA}}
                {{remark.DATA}}

                尊敬的用户，您的押金退回业务审核结果如下
                手机号：尾号3432
                审核结果：通过
                您交付平台的押金已退回您原支付账户，预计1~7个工作日到账，请注意查收。
                */
                WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
                dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车位主，您的注册申请已经审核通过！"));
                dataItem.put("keyword1", new WeixinTemplateMsg.DItem("尾号" + fansInfo.getPhoneNo().substring(7,11)));
                dataItem.put("keyword2", new WeixinTemplateMsg.DItem("通过"));
                dataItem.put("remark", new WeixinTemplateMsg.DItem("恭喜您，您将从以上生效时间起开始享受吼吼停车提供的全面保障和贴心服务。"));
                String url = this.hhtcContextPath + this.portalCenterUrl;
                url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+appid+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+appid+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
                WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
                templateMsg.setTemplate_id("upsa1MpVfulcu69n_f7B6kF2s8uV9ODU47estmNWuK4");
                templateMsg.setUrl(url);
                templateMsg.setTouser(fansInfo.getOpenid());
                templateMsg.setData(dataItem);
                WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(appid), templateMsg);


-----审核通过 发送短信
//模版CODE: SMS_86570144（車主）
                //模版内容: 尊敬的手机尾号为${phone}的用户：您好！感谢您注册吼吼停车，您提交的车主资料已通过物业审核。请登录吼吼停车微信公众号开始抢车位吧！
                Map<String, String> paramMap = new HashMap<>();
                paramMap.put("phone", fansInfo.getPhoneNo().substring(7, 11));
                hhtcHelper.sendSms(fansInfo.getPhoneNo(), "SMS_86570144", paramMap);
                /*
                {{first.DATA}}
                车牌号码：{{keyword1.DATA}}
                生效时间：{{keyword2.DATA}}
                {{remark.DATA}}

                尊敬的 XXX，您的爱车已经通过审核，
                车牌号码：京A00004
                生效时间：2017-03-01
                恭喜您成为萌马成员，您将从以上生效时间起开始享受萌马为爱车提供的全面保障和贴心服务。
                */
                WeixinTemplateMsg.DataItem dataItem = new WeixinTemplateMsg.DataItem();
                dataItem.put("first", new WeixinTemplateMsg.DItem("尊敬的车主，您的注册申请已经审核通过！"));
                dataItem.put("keyword1", new WeixinTemplateMsg.DItem(fansInfo.getCarNumber()));
                dataItem.put("keyword2", new WeixinTemplateMsg.DItem(DateFormatUtils.format(new Date(), "yyyy-MM-dd")));
                dataItem.put("remark", new WeixinTemplateMsg.DItem("我要抢车位，方便加一倍！点击“抢车位”，停车舒心更省心！"));
                String url = this.hhtcContextPath + "/portal/index.html#/park";
                url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid="+appid+"&redirect_uri="+this.hhtcContextPath+"/weixin/helper/oauth/"+appid+"&response_type=code&scope=snsapi_base&state="+url+"#wechat_redirect";
                WeixinTemplateMsg templateMsg = new WeixinTemplateMsg();
                templateMsg.setTemplate_id("lhvy1gpBCZsBbvOMf93qNWxpF2I4j4cnBe5rt2q3z6w");
                templateMsg.setUrl(url);
                templateMsg.setTouser(fansInfo.getOpenid());
                templateMsg.setData(dataItem);
                WeixinHelper.pushWeixinTemplateMsgToFans(WeixinTokenHolder.getWeixinAccessToken(appid), templateMsg);








